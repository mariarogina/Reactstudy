{"version":3,"sources":["Components/tables/DataTable copy.js","Components/CountryForm/index.js","Components/tables/CountryTable.js","Components/tables/SimpleCat.js","Components/tables/CatMock.js","Components/tables/Cat Editable.js","Components/nav/NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["createData","id","name","capital","language","currency","DataTable","useState","rowList","setRowList","isUpDirection","setIsUpDirection","initialForm","formData","setFormData","handleAddCountry","useCallback","prevList","searchTerm","setSearchTerm","searchTermCity","setSearchTermCity","handleSortByField","field","sortedRowList","sort","a","b","map","item","useEffect","fetch","then","response","json","data","filteredRowList","filter","toLowerCase","includes","style","paddingTop","marginTop","color","className","type","placeholder","value","onChange","event","target","prevState","padding","minWidth","onClick","margin","minwidth","scope","align","row","validation","values","error","numericCode","population","nameValidation","CountryForm","initialData","handleSubmit","initialValues","onSubmit","validate","errors","touched","fontSize","htmlFor","CountryTable","slice","intelligence","temperament","image","SimpleCat","console","log","url","width","src","CAT_API_URL","CatMock","setData","fetchCat","res","status","rowKey","inEditMode","setInEditMode","Temp","setTemp","onSave","newTemp","method","body","JSON","stringify","headers","onCancel","updateCat","class","Fragment","marginLeft","currentTemp","onEdit","CatEd","fetchCats","catIntel","setIntel","newIntel","updateCAT","currentIntel","Navbar","to","activeClassName","exact","App","backgroundColor","NavBar","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.21b4ad8c.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\n\r\nfunction createData(id, name, capital, language, currency) {\r\n  return { id, name, capital, language, currency };\r\n}\r\n\r\nexport default function DataTable() {\r\n  const [rowList, setRowList] = useState([]);\r\n  const [isUpDirection, setIsUpDirection] = useState(true);\r\n  const initialForm = { name: \"\", capital: \"\", language: \"\", currency: \"\" };\r\n  const [formData, setFormData] = useState(initialForm);\r\n\r\n  const handleAddCountry = useCallback(() => {\r\n    setRowList((prevList) => [...prevList, formData]);\r\n    setFormData(initialForm);\r\n  }, [setRowList, setFormData, formData]);\r\n\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [searchTermCity, setSearchTermCity] = useState(\"\");\r\n\r\n  const handleSortByField = useCallback(\r\n    (field) => {\r\n      const sortedRowList = rowList.sort((a, b) => {\r\n        if (a[field] > b[field]) {\r\n          return isUpDirection ? 1 : -1;\r\n        } else if (a[field] < b[field]) {\r\n          return isUpDirection ? -1 : 1;\r\n        } else {\r\n          return 0;\r\n        }\r\n      });\r\n\r\n      setRowList(\r\n        sortedRowList.map((item) =>\r\n          createData(\r\n            item.id,\r\n            item.name,\r\n            item.capital,\r\n            item.language,\r\n            item.currency\r\n          )\r\n        )\r\n      );\r\n\r\n      setIsUpDirection(!isUpDirection);\r\n    },\r\n    [rowList, setRowList, setIsUpDirection, isUpDirection]\r\n  );\r\n\r\n\r\n  const handleChange = (event) => {\r\n    setSearchTerm(event.target.value);\r\n  };\r\n  const handleChangeCity = (event) => {\r\n    setSearchTermCity(event.target.value);\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      \"https://gist.githubusercontent.com/mariarogina/1bf4e1947ec2fc1e8ded4882e57f4d69/raw/89eb2570fcfd69f31c4dfd21f5f49733fe0bb4d0/countriesdata.json\"\r\n    )\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        \r\n        setRowList(\r\n          data.map((item) =>\r\n            createData(\r\n              item.id,\r\n              item.name,\r\n              item.capital,\r\n              item.language,\r\n              item.currency\r\n            )\r\n          )\r\n        );\r\n      });\r\n  }, [setRowList, createData]);\r\n\r\n  const filteredRowList = rowList.filter((item) =>\r\n  item.name.toLowerCase().includes(searchTerm)  &&\r\n  item.capital.toLowerCase().includes(searchTermCity) \r\n);\r\n\r\n  if (!filteredRowList) {\r\n    return <div>Still Loading</div>;\r\n  }\r\n\r\n  return (\r\n\r\n    <div style={{ paddingTop: \"50px\", marginTop:'60px' }}>\r\n      <h1 style={{ color: \"#ab0075\" }}>The Short Table of Countries</h1>\r\n      <br />\r\n      <div className=\"App\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Filter country\"\r\n          value={searchTerm}\r\n          onChange={handleChange}\r\n        />\r\n        <div />\r\n        <div className=\"App\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Filter city\"\r\n          value={searchTermCity}\r\n          onChange={handleChangeCity}\r\n        />\r\n        <div />\r\n        <div>\r\n    <div style={{ paddingTop: \"50px\" }}>\r\n      <h1 style={{ color: \"white\" }}>The table of Three Countries</h1>\r\n      <br />\r\n\r\n      <div>\r\n        <div>\r\n        <label>\r\n            Id\r\n            <input\r\n            className = \"inpField\"\r\n              type=\"number\"\r\n              placeholder=\"id\"\r\n              value={formData.id}\r\n              onChange={(event) =>\r\n                setFormData((prevState) => ({\r\n                  ...prevState,\r\n                  id: event.target.value,\r\n                }))\r\n              }\r\n            />\r\n          </label>\r\n          <label>\r\n            name\r\n            <input\r\n            className = \"inpField\"\r\n              type=\"text\"\r\n              placeholder=\"name\"\r\n              value={formData.name}\r\n              onChange={(event) =>\r\n                setFormData((prevState) => ({\r\n                  ...prevState,\r\n                  name: event.target.value,\r\n                }))\r\n              }\r\n            />\r\n          </label>\r\n          <label>\r\n            capital\r\n            <input\r\n            className = \"inpField\"\r\n              type=\"text\"\r\n              placeholder=\"capital\"\r\n              value={formData.capital}\r\n              onChange={(event) =>\r\n                setFormData((prevState) => ({\r\n                  ...prevState,\r\n                  capital: event.target.value,\r\n                }))\r\n              }\r\n            />\r\n          </label>\r\n          <label>\r\n            language\r\n            <input\r\n            className = \"inpField\"\r\n              type=\"text\"\r\n              placeholder=\"language\"\r\n              value={formData.language}\r\n              onChange={(event) =>\r\n                setFormData((prevState) => ({\r\n                  ...prevState,\r\n                  language: event.target.value,\r\n                }))\r\n              }\r\n            />\r\n          </label>\r\n          <label>\r\n            currency\r\n            <input\r\n            className = \"inpField\"\r\n              type=\"text\"\r\n              placeholder=\"currency\"\r\n              value={formData.currency}\r\n              onChange={(event) =>\r\n                setFormData((prevState) => ({\r\n                  ...prevState,\r\n                  currency: event.target.value,\r\n                }))\r\n              }\r\n            />\r\n          </label>\r\n          <br />\r\n          <br />\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            style={{ padding: \"10px\", minWidth: \"100px\" }}\r\n            onClick={handleAddCountry}\r\n          >\r\n            Add a country\r\n          </button>\r\n        </div>\r\n        <br />\r\n        <button\r\n        className=\"btn btn-info\"\r\n        style={{ padding: \"10px\", margin:'10px', minwidth: \"100px\", color:'white'}}\r\n          onClick={() => {\r\n            \r\n\r\n            handleSortByField(\"id\");\r\n          }}\r\n        >\r\n          Sort by Id \r\n        </button>\r\n        <button\r\n        className=\"btn btn-info\"\r\n        style={{ padding: \"10px\", margin:'10px', minwidth: \"100px\", color:'white'}}\r\n          onClick={() => {\r\n            \r\n\r\n            handleSortByField(\"name\");\r\n          }}\r\n        >\r\n          Sort by Name \r\n        </button>\r\n        <button\r\n        className=\"btn btn-info\"\r\n        style={{ padding: \"10px\", margin:'10px', minwidth: \"100px\", color:'white'}}\r\n          onClick={() => {\r\n            \r\n\r\n            handleSortByField(\"capital\");\r\n          }}\r\n        >\r\n          Sort by Capital \r\n        </button>\r\n        <button\r\n        className=\"btn btn-info\"\r\n        style={{ padding: \"10px\", margin:'10px', minwidth: \"100px\", color:'white'}}\r\n          onClick={() => {\r\n            \r\n\r\n            handleSortByField(\"language\");\r\n          }}\r\n        >\r\n          Sort by Language \r\n        </button>\r\n        <button\r\n        className=\"btn btn-info\"\r\n        style={{ padding: \"10px\", margin:'10px', minwidth: \"100px\", color:'white'}}\r\n          onClick={() => {\r\n            \r\n\r\n            handleSortByField(\"currency\");\r\n          }}\r\n        >\r\n          Sort by Currency \r\n        </button>\r\n\r\n        <table className=\"table\" style={{ color: \"inherit\" }}>\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\" \r\n              align=\"center\"\r\n              onClick={() => handleSortByField(\"id\")}>\r\n                No.\r\n              </th>\r\n              <th\r\n                scope=\"col\"\r\n                align=\"center\"\r\n                onClick={() => handleSortByField(\"name\")}\r\n              >\r\n                Name\r\n              </th>\r\n              <th\r\n                scope=\"col\"\r\n                align=\"center\"\r\n                onClick={() => handleSortByField(\"capital\")}\r\n              >\r\n                Capital\r\n              </th>\r\n              <th\r\n                scope=\"col\"\r\n                align=\"center\"\r\n                onClick={() => handleSortByField(\"language\")}\r\n              >\r\n                Language\r\n              </th>\r\n              <th\r\n                scope=\"col\"\r\n                align=\"center\"\r\n                onClick={() => handleSortByField(\"currency\")}\r\n              >\r\n                Currency\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n\r\n          <tbody>\r\n            {filteredRowList.map((row) => (\r\n              <tr key={row.name}>\r\n                <th scope=\"row\">{row.id}</th>\r\n\r\n                <td align=\"center\">{row.name}</td>\r\n                <td align=\"center\">{row.capital}</td>\r\n                <td align=\"center\">{row.language}</td>\r\n                <td align=\"center\">{row.currency}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n    </div>\r\n    </div>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n","import {Field, Form, Formik} from 'formik'\r\n\r\nconst validation = (values) => {\r\n  const error = {}\r\n\r\n  if (!values.numericCode) {\r\n    error.numericCode = 'numericCode is required!'\r\n  }\r\n\r\n  // if (!values.name) {\r\n  //   error.name = 'name is required!'\r\n  // }\r\n\r\n  if (!values.population) {\r\n    error.population = 'population is required!'\r\n  }\r\n\r\n  if (!values.capital) {\r\n    error.capital = 'capital is required!'\r\n  }\r\n\r\n  return error\r\n}\r\n\r\nconst nameValidation = (value) => {\r\n  let error\r\n  if (!value) {\r\n    error = 'name is required!'\r\n  }\r\n  return error\r\n}\r\n\r\n\r\nconst CountryForm = ({initialData, handleSubmit}) => {\r\n\r\n  return <div>\r\n    <Formik\r\n      initialValues={initialData}\r\n      onSubmit={(values) => {\r\n        handleSubmit(values)\r\n      }}\r\n      validate={validation}\r\n    >\r\n      {({errors, touched}) => (\r\n        <Form>\r\n          <label>\r\n            Code\r\n            <Field name=\"numericCode\" placeholder=\"Code\"/>\r\n            <span style={{color: \"red\", fontSize: \"10px\"}}>{touched.numericCode && errors.numericCode}</span>\r\n          </label>\r\n\r\n\r\n          <label htmlFor=\"name\">Name</label>\r\n          <Field\r\n            id=\"name\"\r\n            name=\"name\"\r\n            placeholder=\"name\"\r\n            validate={nameValidation}\r\n          />\r\n          <span style={{color: \"red\", fontSize: \"10px\"}}>{touched.name && errors.name}</span>\r\n\r\n          <label htmlFor=\"capital\">Capital</label>\r\n          <Field id=\"capital\" name=\"capital\" placeholder=\"capital\"/>\r\n          <span style={{color: \"red\", fontSize: \"10px\"}}>{touched.capital && errors.capital}</span>\r\n\r\n          <label htmlFor=\"population\">Capital</label>\r\n          <Field id=\"population\" name=\"population\" placeholder=\"population\"/>\r\n          <span style={{color: \"red\", fontSize: \"10px\"}}>{touched.population && errors.population}</span>\r\n\r\n          <button className = \"btn-primary\" type=\"submit\">Add</button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  </div>\r\n}\r\n\r\nexport default CountryForm","import React, { useCallback } from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport CountryForm from '../CountryForm'\r\n\r\nfunction createData(numericCode, name, capital, population) {\r\n  return { numericCode, name, capital, population };\r\n}\r\n\r\nexport default function CountryTable() {\r\n  const [rowList, setRowList] = useState(null);\r\n  const [isUpDirection, setIsUpDirection] = useState(true);\r\n  const initialForm = {\r\n    numericCode: \"\",\r\n    name: \"Country\",\r\n    capital: \"\",\r\n    population: 0,\r\n  };\r\n\r\n  const handleAddCountry = useCallback((values) => {\r\n    setRowList((prevList) => [...prevList, values]);\r\n  }, [setRowList]);\r\n\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [searchTermCity, setSearchTermCity] = useState(\"\");\r\n\r\n  // const [searchResults, setSearchResults] = useState([]);\r\n\r\n  const handleSortByField = useCallback(\r\n    (field) => {\r\n      const sortedRowList = rowList.sort((a, b) => {\r\n        if (a[field] > b[field]) {\r\n          return isUpDirection ? 1 : -1;\r\n        } else if (a[field] < b[field]) {\r\n          return isUpDirection ? -1 : 1;\r\n        } else {\r\n          return 0;\r\n        }\r\n      });\r\n      setRowList(\r\n        sortedRowList.map((item) => {\r\n          return createData(item.numericCode, item.name, item.capital, item.population)\r\n        })\r\n      );\r\n\r\n      setIsUpDirection(!isUpDirection);\r\n    },\r\n    [rowList, setRowList, setIsUpDirection, isUpDirection]\r\n  );\r\n\r\n  const handleChange = (event) => {\r\n    setSearchTerm(event.target.value);\r\n  };\r\n  const handleChangeCity = (event) => {\r\n    setSearchTermCity(event.target.value);\r\n  };\r\n\r\n  /*\r\n  useEffect(() => {\r\n    if(!rowList){\r\n      return\r\n    }\r\n    const results = rowList.filter(item =>\r\n      item.name.toLowerCase().includes(searchTerm)\r\n    );\r\n    setSearchResults(results);\r\n  }, [searchTerm]);\r\n*/\r\n\r\n  // console.log(searchResults)\r\n  /*\r\n  setRowList(\r\n    searchResults.map((item) =>\r\n      createData(item.numericCode, item.name, item.capital, item.population)\r\n    )\r\n  );\r\n  */\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://restcountries.eu/rest/v2/all\")\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        setRowList(\r\n          data\r\n            .slice(20, 35)\r\n            .map((item) =>\r\n              createData(\r\n                item.numericCode,\r\n                item.name,\r\n                item.capital,\r\n                item.population\r\n              )\r\n            )\r\n        );\r\n      });\r\n  }, []);\r\n\r\n  if (!rowList) {\r\n    return <div>Still Loading</div>;\r\n  }\r\n\r\n  const filteredRowList = rowList.filter((item) =>\r\n    item.name.toLowerCase().includes(searchTerm)  &&\r\n    item.capital.toLowerCase().includes(searchTermCity) \r\n  );\r\n\r\n  /*\r\n  const filteredRowList = rowList.filter((item) =>\r\n     item.capital.toLowerCase().includes(searchTermCity) \r\n  );\r\n  */\r\n\r\n  \r\n\r\n  return (\r\n    <div style={{ paddingTop: \"50px\", marginTop:'60px'}}>\r\n      <h1 style={{ color: \"#ab0075\" }}>The Table of Countries RESTful API</h1>\r\n      <br />\r\n      <div className=\"App\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Filter country\"\r\n          value={searchTerm}\r\n          onChange={handleChange}\r\n        />\r\n        <div />\r\n        <div className=\"App\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Filter city\"\r\n          value={searchTermCity}\r\n          onChange={handleChangeCity}\r\n        />\r\n        <div />\r\n        <div>\r\n          <br />\r\n          <h1> ADD A COUNTRY </h1>\r\n          <CountryForm handleSubmit={handleAddCountry} initialData={{name: '', numericCode: 0, population: 0, capital: ''}}/>\r\n          <button\r\n            className=\"btn btn-success\"\r\n            style={{\r\n              padding: \"10px\",\r\n              margin: \"10px\",\r\n              minwidth: \"100px\",\r\n              color: \"white\",\r\n            }}\r\n            onClick={() => {\r\n              handleSortByField(\"numericCode\");\r\n            }}\r\n          >\r\n            Sort by Code{\" \"}\r\n          </button>\r\n          <button\r\n            className=\"btn btn-success\"\r\n            style={{\r\n              padding: \"10px\",\r\n              margin: \"10px\",\r\n              minwidth: \"100px\",\r\n              color: \"white\",\r\n            }}\r\n            onClick={() => {\r\n              handleSortByField(\"name\");\r\n            }}\r\n          >\r\n            Sort by Name{\" \"}\r\n          </button>\r\n          <button\r\n            className=\"btn btn-success\"\r\n            style={{\r\n              padding: \"10px\",\r\n              margin: \"10px\",\r\n              minwidth: \"100px\",\r\n              color: \"white\",\r\n            }}\r\n            onClick={() => {\r\n              handleSortByField(\"capital\");\r\n            }}\r\n          >\r\n            Sort by Capital{\" \"}\r\n          </button>\r\n          <button\r\n            className=\"btn btn-success\"\r\n            style={{\r\n              padding: \"10px\",\r\n              margin: \"10px\",\r\n              minwidth: \"100px\",\r\n              color: \"white\",\r\n            }}\r\n            onClick={() => {\r\n              handleSortByField(\"population\");\r\n            }}\r\n          >\r\n            Sort by Population{\" \"}\r\n          </button>\r\n        </div>\r\n        <br />\r\n        <table className=\"table\" style={{ color: \"inherit\" }}>\r\n          <thead>\r\n            <tr>\r\n              <th\r\n                scope=\"col\"\r\n                align=\"center\"\r\n                onClick={() => handleSortByField(\"numericCode\")}\r\n              >\r\n                Code\r\n              </th>\r\n              <th\r\n                scope=\"col\"\r\n                align=\"center\"\r\n                onClick={() => handleSortByField(\"name\")}\r\n              >\r\n                Name\r\n              </th>\r\n              <th\r\n                scope=\"col\"\r\n                align=\"center\"\r\n                onClick={() => handleSortByField(\"capital\")}\r\n              >\r\n                Capital\r\n              </th>\r\n              <th\r\n                scope=\"col\"\r\n                align=\"center\"\r\n                onClick={() => handleSortByField(\"population\")}\r\n              >\r\n                Population\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n\r\n          <tbody>\r\n            {filteredRowList.map((row) => (\r\n              <tr key={row.numericCode}>\r\n                <th scope=\"row\">{row.numericCode}</th>\r\n\r\n                <td align=\"center\">{row.name}</td>\r\n                <td align=\"center\">{row.capital}</td>\r\n                <td align=\"center\">{row.population}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\n\r\nfunction createData( name, intelligence, temperament, image) {\r\n  return { name, intelligence, temperament, image};\r\n}\r\n\r\nexport default function SimpleCat() {\r\n  const [rowList, setRowList] = useState([]);\r\n  const [isUpDirection, setIsUpDirection] = useState(true);\r\n \r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n  const handleSortByField = useCallback(\r\n    (field) => {\r\n      const sortedRowList = rowList.sort((a, b) => {\r\n        if (a[field] > b[field]) {\r\n          return isUpDirection ? 1 : -1;\r\n        } else if (a[field] < b[field]) {\r\n          return isUpDirection ? -1 : 1;\r\n        } else {\r\n          return 0;\r\n        }\r\n      });\r\n\r\n      setRowList(\r\n        sortedRowList.map((item) =>\r\n          createData(\r\n            \r\n            item.name,\r\n            item.intelligence,\r\n            item.temperament,\r\n            item.image\r\n          )\r\n        )\r\n      );\r\n\r\n      setIsUpDirection(!isUpDirection);\r\n    },\r\n    [rowList, setRowList, setIsUpDirection, isUpDirection]\r\n  );\r\n\r\n\r\n  const handleChange = (event) => {\r\n    setSearchTerm(event.target.value);\r\n  };\r\n  \r\n\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n        \"https://api.thecatapi.com/v1/breeds\"\r\n\r\n        )\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        console.log(data);\r\n        setRowList(\r\n          data.map((item) =>\r\n            createData(\r\n              \r\n              item.name,\r\n              item.intelligence,\r\n              item.temperament,\r\n              item.image?.url\r\n            )\r\n          )\r\n        );\r\n      });\r\n  }, [setRowList, createData]);\r\n\r\n  const filteredRowList = rowList.filter((item) =>\r\n  item.name.toLowerCase().includes(searchTerm)\r\n  \r\n);\r\n\r\n  if (!filteredRowList) {\r\n    return <div>Still Loading</div>;\r\n  }\r\n\r\n  return (\r\n\r\n    <div style={{ paddingTop: \"50px\", marginTop:'50px' }}>\r\n      <h1 style={{ color: \"#ab0075\" }}>The Table of CATS for filter/sort</h1>\r\n      <br />\r\n      <div className=\"App\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Filter name\"\r\n          value={searchTerm}\r\n          onChange={handleChange}\r\n        />\r\n        <div />\r\n       \r\n        <div>\r\n    <div style={{ paddingTop: \"50px\" }}>\r\n      \r\n        <button\r\n        className=\"btn btn-info\"\r\n        style={{ padding: \"10px\", margin:'10px', minwidth: \"100px\", color:'white'}}\r\n          onClick={() => {\r\n            \r\n\r\n            handleSortByField(\"name\");\r\n          }}\r\n        >\r\n          Sort by Name \r\n        </button>\r\n        <button\r\n        className=\"btn btn-info\"\r\n        style={{ padding: \"10px\", margin:'10px', minwidth: \"100px\", color:'white'}}\r\n          onClick={() => {\r\n            \r\n\r\n            handleSortByField(\"intelligence\");\r\n          }}\r\n        >\r\n          Sort by Intelligence \r\n        </button>\r\n\r\n        \r\n\r\n        <table className=\"table\" style={{ color: \"inherit\" }}>\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\" \r\n              align=\"center\"\r\n              onClick={() => handleSortByField(\"name\")}>\r\n                Name\r\n              </th>\r\n              <th\r\n                scope=\"col\"\r\n                align=\"center\"\r\n                onClick={() => handleSortByField(\"intelligence\")}\r\n              >\r\n                Intelligence\r\n              </th>\r\n              <th\r\n                scope=\"col\"\r\n                align=\"center\"\r\n                onClick={() => handleSortByField(\"temperament\")}\r\n              >\r\n                Temperament\r\n              </th>\r\n              <th\r\n                scope=\"col\"\r\n                align=\"center\"\r\n          \r\n              >\r\n                Image\r\n              </th>\r\n              \r\n            </tr>\r\n          </thead>\r\n\r\n          <tbody>\r\n            {filteredRowList.map((row) => (\r\n              <tr key={row.name}>\r\n                <th scope=\"row\">{row.name}</th>\r\n\r\n                <td align=\"center\">{row.intelligence}</td>\r\n               \r\n                <td align=\"center\">{row.temperament}</td>\r\n                <td align=\"center\"><img style={{width:'250px'}} src={row.image} /></td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n    </div>\r\n    </div>\r\n    \r\n  \r\n  );\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\n\r\nconst API_HOST = \"http://localhost:3000\";\r\nconst CAT_API_URL = `${API_HOST}/cats`;\r\n\r\nfunction CatMock() {\r\n    const [data, setData] = useState([]);\r\n\r\n    const fetchCat = () => {\r\n        fetch(`${CAT_API_URL}`)\r\n            .then(res => res.json())\r\n            .then(json => setData(json));\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchCat();\r\n    }, []);\r\n\r\n\r\n    const [inEditMode, setInEditMode] = useState({\r\n        status: false,\r\n        rowKey: null\r\n    });\r\n\r\n    const [Temp, setTemp] = useState(null);\r\n\r\n    /**\r\n     *\r\n     * @param id - The id of the product\r\n     * @param currentTemp - The current unit price of the product\r\n     */\r\n    const onEdit = ({id, currentTemp}) => {\r\n        setInEditMode({\r\n            status: true,\r\n            rowKey: id\r\n        })\r\n        setTemp(currentTemp);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param id\r\n     * @param newTemp\r\n     */\r\n    const updateCat = ({id, newTemp}) => {\r\n        fetch(`${CAT_API_URL}/${id}`, {\r\n            method: \"PATCH\",\r\n            body: JSON.stringify({\r\n                temperament: newTemp\r\n            }),\r\n            headers: {\r\n                \"Content-type\": \"application/json; charset=UTF-8\"\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                // reset inEditMode and unit price state values\r\n                onCancel();\r\n\r\n                // fetch the updated data\r\n                fetchCat();\r\n            })\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param id -The id of the product\r\n     * @param newTemp - The new unit price of the product\r\n     */\r\n    const onSave = ({id, newTemp}) => {\r\n        updateCat({id, newTemp});\r\n    }\r\n\r\n    const onCancel = () => {\r\n        // reset the inEditMode state value\r\n        setInEditMode({\r\n            status: false,\r\n            rowKey: null\r\n        })\r\n        // reset the unit price state value\r\n        setTemp(null);\r\n    }\r\n\r\n    return (\r\n        <div style={{margin:'200px'}}className=\"container\">\r\n            <h1>Simple Cat Table</h1>\r\n            <table class=\"table\">\r\n                <thead>\r\n                <tr>\r\n                    <th  scope=\"col\">Cat Name</th>\r\n                    <th  scope=\"col\">Intelligence</th>\r\n                    <th  scope=\"col\">Cat Temperament</th>\r\n                    <th  scope=\"col\">images</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody> <th scope=\"row\"></th>\r\n                {\r\n                    data.map((item) => (\r\n                        <tr key={item.id}>\r\n                            <td>{item.name}</td>\r\n                            <td>{item.intelligence}</td>\r\n                            <td>\r\n                                {\r\n                                    inEditMode.status && inEditMode.rowKey === item.id ? (\r\n                                        <input value={Temp}\r\n                                               onChange={(event) => setTemp(event.target.value)}\r\n                                        />\r\n                                    ) : (\r\n                                        item.temperament\r\n                                    )\r\n                                }\r\n                            \r\n                                {\r\n                                    inEditMode.status && inEditMode.rowKey === item.id ? (\r\n                                        <React.Fragment style ={{margin:'10px'}}>\r\n                                            <button\r\n                                              style={{margin:'20px'}}\r\n                                                className={\"btn btn-outline-dark\"}\r\n                                                onClick={() => onSave({id: item.id, newTemp: Temp})}\r\n                                            >\r\n                                                Save\r\n                                            </button>\r\n\r\n                                            <button\r\n                                              style={{margin:'20px'}}\r\n                                                className={\"btn btn-outline-danger\"}\r\n                                                style={{marginLeft: 8}}\r\n                                                onClick={() => onCancel()}\r\n                                            >\r\n                                                Cancel\r\n                                            </button>\r\n                                        </React.Fragment>\r\n                                    ) : (\r\n                                        <button style ={{margin:'20px'}}\r\n                                            className={\"btn btn-outline-warning\"}\r\n                                            onClick={() => onEdit({id: item.id, currentTemp: item.temperament})}\r\n                                        >\r\n                                            Edit\r\n                                        </button>\r\n                                    )\r\n                                }\r\n                            </td>\r\n                            <td><img style={{width:'200px'}} src={item.image?.url} /></td>\r\n                        </tr>\r\n                    ))\r\n                }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default CatMock;","import React, {useEffect, useState} from 'react';\r\n\r\n\r\nconst CAT_API = \"https://api.thecatapi.com/v1/breeds/\";\r\n\r\nfunction CatEd() {\r\n    const [data, setData] = useState([]);\r\n\r\n    const fetchCats = () => {\r\n        fetch(\"https://api.thecatapi.com/v1/breeds\")\r\n            .then(res => res.json())\r\n            .then(json => setData(json));\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchCats();\r\n    }, []);\r\n\r\n\r\n    const [inEditMode, setInEditMode] = useState({\r\n        status: false,\r\n        rowKey: null\r\n    });\r\n\r\n    const [catIntel, setIntel] = useState(null);\r\n\r\n    /**\r\n     *\r\n     * @param id - The id of the product\r\n     * @param currentIntel - The current unit price of the product\r\n     */\r\n    const onEdit = ({id, currentIntel}) => {\r\n        setInEditMode({\r\n            status: true,\r\n            rowKey: id\r\n        })\r\n        setIntel(currentIntel);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param id\r\n     * @param newIntel\r\n     */\r\n     const updateCAT = ({id, newIntel}) => {\r\n        fetch(`${CAT_API}/${id}`, {\r\n            method: \"PATCH\",\r\n            body: JSON.stringify({\r\n                temperament: newIntel\r\n            }),\r\n            headers: {\r\n                \"Content-type\": \"application/json; charset=UTF-8\"\r\n            }\r\n        })\r\n\r\n        .then(response => response.json())\r\n        .then(json => {\r\n           \r\n            \r\n                // reset inEditMode and unit price state values\r\n                onCancel();\r\n\r\n                // fetch the updated data\r\n                fetchCats();\r\n            })\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param id -The id of the product\r\n     * @param newIntel - The new unit price of the product\r\n     */\r\n    const onSave = ({id, newIntel}) => {\r\n        updateCAT({id, newIntel});\r\n    }\r\n\r\n    const onCancel = () => {\r\n        // reset the inEditMode state value\r\n        setInEditMode({\r\n            status: false,\r\n            rowKey: null\r\n        })\r\n        // reset the unit price state value\r\n        setIntel(null);\r\n    }\r\n\r\n    \r\n    return (\r\n        <div className=\"container\" style={{marginTop:'70px'}}>\r\n            <h1>Simple Cat Table (edit temperament)</h1>\r\n            <table class=\"table\">\r\n                <thead>\r\n                <tr>\r\n                    <th scope=\"col\">Cat Temperament</th>\r\n                    <th scope=\"col\">Cat Name </th>\r\n                  \r\n                    <th scope=\"col\">Intelligence</th>\r\n                    <th scope=\"col\">Imange</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                <th scope=\"row\"></th>\r\n                {\r\n                    data.map((item) => (\r\n                        <tr key={item.id}>\r\n                        \r\n                        <td>\r\n                                {\r\n                                    inEditMode.status && inEditMode.rowKey === item.id ? (\r\n                                        <input value={catIntel}\r\n                                               onChange={(event) => setIntel(event.target.value)}\r\n                                        />\r\n                                    ) : (\r\n                                        item.temperament\r\n                                    )\r\n                                }\r\n                                \r\n                                {\r\n                                    inEditMode.status && inEditMode.rowKey === item.id ? (\r\n                                        <React.Fragment>\r\n                                            <button   style={{margin:'20px'}}\r\n                                                className={\"btn btn-outline-dark\"}\r\n                                                onClick={() => onSave({id: item.id, newIntel: catIntel})}\r\n                                            >\r\n                                                Save\r\n                                            </button>\r\n\r\n                                            <button   style={{margin:'20px'}}\r\n                                                className={\"btn btn-outline-danger\"}\r\n                                                style={{marginLeft: 8}}\r\n                                                onClick={() => onCancel()}\r\n                                            >\r\n                                                Cancel\r\n                                            </button>\r\n                                        </React.Fragment>\r\n                                    ) : (\r\n                                        <button\r\n                                        style={{margin:'20px'}}\r\n                                            className={\"btn btn-outline-warning\"}\r\n                                            onClick={() => onEdit({id: item.id, currentIntel: item.temperament})}\r\n                                        >\r\n                                            Edit\r\n                                        </button>\r\n                                    )\r\n                                }\r\n                            </td>\r\n                            <td>{item.name}</td>\r\n                            <td>{item.intelligence}</td>\r\n                            <td >\t<img style={{width:'250px'}}  src={item.image?.url} /></td>\r\n                           \r\n                        </tr>\r\n                    ))\r\n                }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CatEd;","import React from 'react'\r\nimport { NavLink} from  'react-router-dom'\r\n\r\n\r\nconst Navbar = () => {\r\n    return ( <div >\r\n        <ul id=\"navbar\" class=\" navbar navbar-expand-lg \r\n        navbar-light  fixed-top py-lg-0 \" >\r\n        <li  class=\"nav-link\">\r\n          <NavLink style={{color:\"white\", margin:\"15px\", fontSize:'1.4rem', width:'200px'}} to='/' activeClassName=\"active\" exact>Home</NavLink>\r\n        </li>\r\n        <li  class=\"nav-link\">\r\n          <NavLink style={{color:\"white\",  margin:\"15px\", fontSize:'1.4rem', width:'200px'}} to='/countries' activeClassName=\"active\" >Countries</NavLink>\r\n        </li>\r\n        <li  class=\"nav-link\">\r\n          <NavLink style={{color:\"white\",  margin:\"15px\", fontSize:'1.4rem', width:'200px'}} to='/simplecat' activeClassName=\"active\">Cats table</NavLink>\r\n        </li>\r\n        <li  class=\"nav-link\">\r\n          <NavLink style={{color:\"white\",  margin:\"15px\", fontSize:'1.4rem', width:'200px'}} to='/catmock' activeClassName=\"active\">Cat editable</NavLink>\r\n        </li>\r\n        <li  class=\"nav-link\">\r\n          <NavLink style={{color:\"white\",  margin:\"15px\", fontSize:'1.4rem', width:'200px'}} to='/cated' activeClassName=\"active\">Cats reserve</NavLink>\r\n        </li>\r\n      </ul>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Navbar","import \"./App.css\";\r\n\r\nimport React from \"react\";\r\nimport DataTable from \"./Components/tables/DataTable copy\";\r\nimport CountryTable from \"./Components/tables/CountryTable\";\r\nimport SimpleCat from \"./Components/tables/SimpleCat\";\r\nimport CatMock from \"./Components/tables/CatMock\";\r\nimport CatEd from \"./Components/tables/Cat Editable\";\r\nimport NavBar from \"./Components/nav/NavBar\";\r\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\r\n\r\n\r\nfunction App() {\r\n  let styles = { backgroundColor: \"#6C8B93\", color: \"black\" };\r\n\r\n  return (\r\n    <div style={styles} className=\"App\">\r\n      <header  className=\"App-header\">\r\n      \r\n      <BrowserRouter>\r\n      <NavBar  />\r\n    <Switch>\r\n      \r\n    <Route exact path = '/' component = {DataTable} />\r\n    <Route exact path = '/countries' component = {CountryTable} />\r\n    <Route exact path = '/simplecat' component = {SimpleCat} />\r\n    <Route  path = '/catmock' component = {CatMock} />\r\n    <Route  path = '/cated' component = {CatEd} />\r\n    <Route component = {() => <h2>Not found</h2>} />\r\n      \r\n    </Switch>\r\n\r\n  </BrowserRouter>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}